unit unPrincipal;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtCtrls, Vcl.Styles, Vcl.Themes;

type
  TForm1 = class(TForm)
    Label1: TLabel;
    txtNum1: TEdit;
    Label2: TLabel;
    txtNum2: TEdit;
    btSomar: TButton;
    btSubtrair: TButton;
    btDividir: TButton;
    btMultiplicar: TButton;
    Label3: TLabel;
    txtResultado: TEdit;
    opcVisual: TRadioGroup;
    procedure btSomarClick(Sender: TObject);
    procedure btSubtrairClick(Sender: TObject);
    procedure btMultiplicarClick(Sender: TObject);
    procedure btDividirClick(Sender: TObject);
    procedure opcVisualClick(Sender: TObject);
    procedure txtNum1Change(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    
  private
    { Private declarations }
    function calcularResultado(num1, num2 : Real; operacao : String) : Real;
    function validarCampos() : Boolean;
    procedure habilitarBotoes(habilitado : Boolean);
    procedure registrarLog(acao : String);
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}




{ TForm1 }

procedure TForm1.btDividirClick(Sender: TObject);
begin
  if validarCampos then
    begin
      if txtNum2.Text = '0' then
        ShowMessage('Não é possível dividir por zero!')
      else
        txtResultado.Text := FloatToStr(calcularResultado(StrToFloat(txtNum1.Text), StrToFloat(txtNum2.Text), 'dividir'));
    end;
end;

procedure TForm1.btMultiplicarClick(Sender: TObject);
begin
  if validarCampos then
    begin
      txtResultado.Text := FloatToStr(calcularResultado(StrToFloat(txtNum1.Text), StrToFloat(txtNum2.Text), 'multiplicar'));
      registrarLog('Multiplicar, num 1 = ' + txtNum1.Text + ', num2 = ' + txtNum2.Text + ', Resultado = ' + txtResultado.Text);
    end;
end;

procedure TForm1.btSomarClick(Sender: TObject);
begin
  if validarCampos then
    begin
      txtResultado.Text := FloatToStr(calcularResultado(StrToFloat(txtNum1.Text), StrToFloat(txtNum2.Text), 'somar'));
      registrarLog('Soma, num 1 = ' + txtNum1.Text + ', num2 = ' + txtNum2.Text + ', Resultado = ' + txtResultado.Text);
    end;

end;

procedure TForm1.btSubtrairClick(Sender: TObject);
begin
  if validarCampos then
    begin
      txtResultado.Text := FloatToStr(calcularResultado(StrToFloat(txtNum1.Text), StrToFloat(txtNum2.Text), 'subtrair'));
      registrarLog('Subtrair, num 1 = ' + txtNum1.Text + ', num2 = ' + txtNum2.Text + ', Resultado = ' + txtResultado.Text);
    end;

end;



function TForm1.calcularResultado(num1: Real; num2: Real; operacao: string): Real;
var
  resultado : Real;

begin

  resultado := 0;

  if operacao = 'somar' then
    resultado := num1 + num2;

  if operacao = 'subtrair' then
    resultado := num1 - num2;

  if operacao = 'multiplicar' then
    resultado := num1 * num2;

  if operacao = 'dividir' then
    resultado := num1 / num2;

  Result := resultado;
end;

procedure TForm1.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  registrarLog('Aplicação encerrada');
  registrarLog('--------------------------------');
end;

procedure TForm1.FormCreate(Sender: TObject);
begin
  registrarLog('--------------------------------');
  registrarLog('Aplicação iniciada');
end;

procedure TForm1.habilitarBotoes(habilitado: Boolean);
begin
  btSomar.Enabled := habilitado;
  btSubtrair.Enabled := habilitado;
  btMultiplicar.Enabled := habilitado;
  btDividir.Enabled := habilitado;
end;

procedure TForm1.opcVisualClick(Sender: TObject);
begin
  case opcVisual.ItemIndex of
    0: TstyleManager.SetStyle('Windows');
    1: TstyleManager.SetStyle('Glow');
    2: TstyleManager.SetStyle('Aqua Light Slate');
  end;

end;

procedure TForm1.registrarLog(acao: String);
var
  arquivo: TextFile;

begin
  try
    AssignFile(arquivo, 'Logs.txt');

    //Abre o arquivo e posiciona ponteiro no final
    if FileExists('Logs.txt') then
      Append(arquivo)
    else
      //Se o arquivo não existir, ele cria
      Rewrite(arquivo);

    //Registra no arquivo uma nova linha com data e hora da ação ewxecutada
    Writeln(arquivo, '['+DateTimeToStr(now())+']' + acao);

  finally
    //Sempre será executado, independete dos eventos acima
    CloseFile(arquivo);

  end;
end;

procedure TForm1.txtNum1Change(Sender: TObject);
begin
  if validarCampos then
    habilitarBotoes(True)
  else
    habilitarBotoes(False);
end;

function TForm1.validarCampos: Boolean;
begin
  if (txtNum1.Text = '') or (txtNum2.Text = '') then
    Result := False
  else
    try
      StrToFloat(txtNum1.text);
      StrToFloat(txtNum2.text);

      Result := True;
    except
      on E: EConvertError do
        begin
          Result := False;
        end;
    end;
end;

end.
